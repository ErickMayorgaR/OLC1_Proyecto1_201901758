package Analizadores;

import java_cup.runtime.*;
import Funcionalidades.*;
import java.util.ArrayList;
import olc1.*;


parser code
{:

public ArrayList<Arbol> arboles = new ArrayList<Arbol>();
public ArrayList<String> id_conjunto = new ArrayList<String>();
public ArrayList<String> e_conjuntos = new ArrayList<String>();
public ArrayList<Conjunto> conjuntos = new ArrayList<Conjunto>();
public ArrayList<Validar> lista_validar = new ArrayList<Validar>();
public int contador = 0;
public int contador_hoja = 1;

public Arbol crear_arbol(String nombre, Nodo raiz){
    
    return new Arbol(nombre, new Nodo(raiz, new Nodo(contador,"#",contador_hoja),contador+1,".",contador_hoja));
}


    //-----------------------errores--------------------------------------------
     public void syntax_error(Symbol s)
    {
        System.err.println("Error en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        Error_ nuevoe = new Error_("Tipo Sintactico (Recuperado)", s.value.toString(), s.right+1, s.left+1);
        Interfaz.listaErrores.add(nuevoe);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        if(s.value!=null){
        Error_ nuevoe = new Error_("Tipo Sintactico", s.value.toString(), s.right+1, s.left+1);
        Interfaz.listaErrores.add(nuevoe);
}
    }
    //--------------------------------------------------------------------------

:}



terminal String identificador, entero, cadena, especialc, cadenanum, cadenamin, cadenamayus, cadenavar, nombreexpresion;
  
terminal String conj, trazo, dospuntos, guion, mayor, menor, puntocoma;//7
terminal String guionbajo, coma, comilladoble, exclamacion, numeral, dolar;//13
terminal String ampersand, comillasimple, parentesisaper, parentesiscierre; //17
terminal String mas, porcentaje, asterisco, slash, igual, interrogacion; //23
terminal String arroba, corcheteaper, corchetecierre, potencia, acento; //28
terminal String barraor, llaveaper, llavecierre, punto, letra;// 32


non terminal INICIO, CONJUNTO, VALIDAR;
non terminal Nodo EXPRESION;
non terminal String PARTE1, PARTE2,DESCRPCONJUNTO, LISTA, LINEAEXPRESION;


start with INICIO;

INICIO::=llaveaper PARTE1 porcentaje porcentaje porcentaje porcentaje PARTE2 llavecierre {:System.out.println("Funciono");:};

PARTE1::=PARTE1 CONJUNTO
           |PARTE1 LINEAEXPRESION
           |CONJUNTO
           |LINEAEXPRESION
           |error;

PARTE2::=PARTE2 VALIDAR 
           |VALIDAR
           |error;

CONJUNTO::=conj dospuntos identificador:var1 guion mayor DESCRPCONJUNTO:var2 puntocoma {:RESULT = parser.conjuntos.add(new Conjunto(var1, var2));:};

DESCRPCONJUNTO::=LISTA:var1         {:RESULT = var1;:}
                  |cadenanum:var1   {:RESULT = var1;:}
                  |cadenamin:var1   {:RESULT = var1;:}
                  |cadenavar:var1   {:RESULT = var1;:}
                  |cadenamayus:var1 {:RESULT = var1;:}; 

LISTA::=LISTA:var1 coma:var2 letra:var3       {:RESULT= var1+var2+var3;:}
         |LISTA:var1 coma:var2 especialc:var3 {:RESULT= var1+var2+var3;:}
         |LISTA:var1 coma:var2 entero:var3     {:RESULT= var1+var2+var3;:}
         |letra:var1                           {:RESULT= var1;:}
         |entero:var1                          {:RESULT= var1;:}
         |especialc:var1                       {:RESULT= var1;:};


LINEAEXPRESION::= identificador:var1 guion mayor EXPRESION:var2 puntocoma {:parser.arboles.add(parser.crear_arbol(var1,var2));contador = 0; contador_hoja = 1;:};

EXPRESION::= punto EXPRESION:var1 EXPRESION:var2         {:RESULT= new Nodo(var1,var2,parser.contador++,".",parser.contador_hoja);:}
            |barraor EXPRESION:var1 EXPRESION:var2      {:RESULT = new Nodo(var1,var2,parser.contador++,"|",parser.contador_hoja);:}
            |mas EXPRESION:var1                          {:RESULT = new Nodo(var1,null,parser.contador++,"+",parser.contador_hoja);:}           
            |asterisco EXPRESION:var1                    {:RESULT = new Nodo(var1,null,parser.contador++,"*",parser.contador_hoja);:}
            |interrogacion EXPRESION:var1                {:RESULT = new Nodo(var1,null,parser.contador++,"?",parser.contador_hoja);:}
            |nombreexpresion:var1                       {:RESULT = new Nodo(parser.contador++,var1,parser.contador_hoja++);:}
            |cadena:var1                                 {:RESULT = new Nodo(parser.contador++,var1,parser.contador_hoja++);:}
            |entero:var1                                 {:RESULT = new Nodo(parser.contador++,var1,parser.contador_hoja++);:}
            |llaveaper identificador:var1 llavecierre  {:RESULT = new Nodo(parser.contador++,var1,parser.contador_hoja++);:}
            |especialc:var1                             {:RESULT = new Nodo(parser.contador++,var1,parser.contador_hoja++);:};

VALIDAR::= identificador:var1 dospuntos cadena:var2 puntocoma {:parser.lista_validar.add(new Validar(var1,var2));:};
            